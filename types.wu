Object: struct {}

Object_T: trait {
    release: fun(self) -> bool
    type:    fun(self) -> str
    typeOf:  fun(self, str) -> bool
}

implement Object: Object_T {
    release: extern fun(self) -> bool
    type:    extern fun(self) -> str
    typeOf:  extern fun(self, str) -> bool
}



Data: struct {}

Data_T: trait {
    clone:          fun(self, Data) -> int
    getFFIPointer:  fun(self) -> any
    getPointer:     fun(self) -> any
    getSize:        fun(self) -> int
    getString:      fun(self) -> str
}

implement Data: Data_T {
    clone:          extern fun(self, Data) -> int
    getFFIPointer:  extern fun(self) -> any
    getPointer:     extern fun(self) -> any
    getSize:        extern fun(self) -> int
    getString:      extern fun(self) -> str
}

implement Data: Object_T {
    release: extern fun(self) -> bool
    type:    extern fun(self) -> str
    typeOf:  extern fun(self, str) -> bool
}



AudioConfig: struct {
    mic: bool           # Request and use microphone capabilities in Android (boolean)
    mixwithsystem: bool # Keep background music playing when opening LOVE (boolean, iOS and Android only)
}

WindowConfig: struct {
    title: str          # The window title (string)
    icon: str?          # Filepath to an image to use as the window's icon (string)
    width: int          # The window width (number)
    height: int         # The window height (number)
    borderless: bool    # Remove all border visuals from the window (boolean)
    resizable: bool     # Let the window be user-resizable (boolean)
    minwidth: int       # Minimum window width if the window is resizable (number)
    minheight: int      # Minimum window height if the window is resizable (number)
    fullscreen: bool    # Enable fullscreen (boolean)
    fullscreentype: str # Choose between "desktop" fullscreen or "exclusive" fullscreen mode (string)
    vsync: int          # Vertical sync mode (number)
    msaa: int           # The number of samples to use with multi-sampled antialiasing (number)
    depth: int?         # The number of bits per sample in the depth buffer
    stencil: int?       # The number of bits per sample in the stencil buffer
    display: int        # Index of the monitor to show the window in (number)
    highdpi: bool       # Enable high-dpi mode for the window on a Retina display (boolean)
    usedpiscale: bool   # Enable automatic DPI scaling when highdpi is set to true as well (boolean)
    x: int?             # The x-coordinate of the window's position in the specified display (number)
    y: int?             # The y-coordinate of the window's position in the specified display (number)
}

ModuleConfig: struct {
    audio: bool     # Enable the audio module (boolean)
    data: bool      # Enable the data module (boolean)
    event: bool     # Enable the event module (boolean)
    font: bool      # Enable the font module (boolean)
    graphics: bool  # Enable the graphics module (boolean)
    image: bool     # Enable the image module (boolean)
    joystick: bool  # Enable the joystick module (boolean)
    keyboard: bool  # Enable the keyboard module (boolean)
    math: bool      # Enable the math module (boolean)
    mouse: bool     # Enable the mouse module (boolean)
    physics: bool   # Enable the physics module (boolean)
    sound: bool     # Enable the sound module (boolean)
    system: bool    # Enable the system module (boolean)
    thread: bool    # Enable the thread module (boolean)
    timer: bool     # Enable the timer module (boolean), Disabling it will result 0 delta time in love.update
    touch: bool     # Enable the touch module (boolean)
    video: bool     # Enable the video module (boolean)
    window: bool    # Enable the window module (boolean)
}

Config: struct {
    identity: str?              # The name of the save directory (string)
    appendidentity: bool        # Search files in source directory before save directory (boolean)
    version: str                # The LÃ–VE version this game was made for (string)
    console: bool               # Attach a console (boolean, Windows only)
    accelerometerjoystick: bool # Enable the accelerometer on iOS and Android by exposing it as a Joystick (boolean)
    externalstorage: bool       # True to save files (and read from the save directory) in external storage on Android (boolean)
    gammacorrect: bool          # Enable gamma-correct rendering, when supported by the system (boolean)
    audio: AudioConfig          # Audio configuration
    window: WindowConfig        # Window configuration
    modules: ModuleConfig       # Module configuration
}
